angular.module("jugendstadtplan.pins",["ui.router","jugendstadtplan.links","jugendstadtplan.ansprechpartner","jugendstadtplan.termin"]),angular.module("jugendstadtplan.links",[]),angular.module("jugendstadtplan.adresse",[]),angular.module("jugendstadtplan.ansprechpartner",[]),angular.module("jugendstadtplan.startseite",["ui.router","leaflet-directive"]),angular.module("jugendstadtplan.termin",[]),angular.module("jugendstadtplan.traeger",["ui.router","jugendstadtplan.links","jugendstadtplan.ansprechpartner"]);var Jugendstadtplan=Jugendstadtplan||{};Jugendstadtplan.Controllers=angular.module("jugendstadtplan.controllers",[]),angular.module("jugendstadtplan",["ngResource","ngSanitize","ui.router","leaflet-directive","textAngular","ngFileUpload","jugendstadtplan.api","jugendstadtplan.startseite","jugendstadtplan.pins","jugendstadtplan.traeger","jugendstadtplan.controllers"]).config(function(e,n){n.otherwise("/startseite")}).run(function(){}).controller("AppCtrl",["$scope","$location",function(e,n){e.$on("$stateChangeSuccess",function(n,t,r,a,l){angular.isDefined(t.data.pageTitle)&&(e.pageTitle=t.data.pageTitle+" | Jugendstadtplan")})}]),angular.module("plusOne",[]).directive("plusOne",function(){return{link:function(e,n,t){gapi.plusone.render(n[0],{size:"medium",href:"http://bit.ly/ngBoilerplate"})}}});var jugendstadtplanApi=angular.module("jugendstadtplan.api",["ngResource"]),backendPrefix="/app_dev.php";jugendstadtplanApi.provider("Pin",function(){this.$get=["$resource",function(e){var n=backendPrefix+"/pins";return e(n,{},{get:{method:"GET",url:n+"/:id",params:{id:"@id"}},update:{method:"PUT",url:n+"/update/:id",params:{id:"@id"}},save:{method:"POST",url:n+"/create"},"delete":{method:"DELETE",url:n+"/delete/:id",params:{id:"@id"}}})}]}),jugendstadtplanApi.provider("Traeger",function(){this.$get=["$resource",function(e){var n=backendPrefix+"/traeger";return e(n,{},{get:{method:"GET",url:n+"/:id",params:{id:"@id"}},update:{method:"PUT",url:n+"/update/:id",params:{id:"@id"}},save:{method:"POST",url:n+"/create"},"delete":{method:"DELETE",url:n+"/delete/:id",params:{id:"@id"}}})}]}),jugendstadtplanApi.provider("Kategorie",function(){this.$get=["$resource",function(e){var n=backendPrefix+"/kategorie";return e(n)}]}),angular.module("jugendstadtplan.pins").config(function(e){e.state("Detail: Pin",{url:"/pin/{id:[0-9]+}",views:{main:{controller:"PinDetailController",templateUrl:"src/app/pins/views/detail.tpl.html"}},resolve:{pinDetail:["$stateParams","Pin",function(e,n){return n.get({},{id:e.id})}]},data:{pageTitle:"Pin"}})}),Jugendstadtplan.Controllers.controller("PinDetailController",["$scope","pinDetail",function(e,n){e.markers=[],e.center={lat:50.732829246726,lng:7.0937004090117,zoom:13},n.$promise.then(function(){e.pin=n,angular.extend(e,{defaults:{scrollWheelZoom:!1}}),e.center={lat:n.latitude,lng:n.longitude,zoom:15};var t={lat:n.latitude,lng:n.longitude,title:n.titel,focus:!0,message:"<h3>"+n.titel+"</h3>"+n.beschreibung};e.markers.push(t)},function(){angular.extend(e,{defaults:{scrollWheelZoom:!1}})})}]),angular.module("jugendstadtplan.pins").config(function(e){e.state("Form: Pin",{url:"/pin/create",views:{main:{controller:"PinFormController",templateUrl:"src/app/pins/views/form.tpl.html"}},data:{pageTitle:"Pin erstellen"}})}),Jugendstadtplan.Controllers.controller("PinFormController",["$scope","$location","Pin","Traeger","Kategorie",function(e,n,t,r,a){e.kategorien=a.query(),e.pin=new t,e.pins=t.query(),e.traegers=r.query(),angular.extend(e,{center:{lat:50.732829246726,lng:7.0937004090117,zoom:13},defaults:{scrollWheelZoom:!1},events:{}}),e.pin.markers=[],e.$on("leafletDirectiveMap.click",function(n,t){var r=t.leafletEvent;e.pin.markers[0]={lat:r.latlng.lat,lng:r.latlng.lng,draggable:!0,focus:!0}}),e.newPin=function(){e.pin=new t,e.pin.markers=[],e.editing=!1},e.save=function(){e.pin.id?t.update(e.pin):e.pin.$save().then(function(n){e.pins.push(n)}),e.newPin()},e.setActivePin=function(n){e.pin=n,e.pin.markers=[],null!=n.longitude&&(e.pin.markers[0]={lat:n.latitude,lng:n.longitude,draggable:!0,focus:!0}),e.editing=!0},e.remove=function(n){t["delete"](n,function(){var t=e.pins.indexOf(n);-1!=t&&e.pins.splice(t,1)})},e.barrierefreiheitsgrade=["Gut","Teilweise","Nicht barrierefrei"],e.kostenarten=["Kostenlos","Kostenpflichtig"],e.mindestalters=["ab 12","ab 16","ab 18","ab 21"]}]),angular.module("jugendstadtplan.pins").config(function(e){e.state("Liste: Pin",{url:"/pins",views:{main:{controller:"PinsController",templateUrl:"src/app/pins/views/list.tpl.html"}},data:{pageTitle:"Pins"}})}),Jugendstadtplan.Controllers.controller("PinsController",["$scope","$location","Pin",function(e,n,t){e.pins=t.query(),e.viewPin=function(e){n.path("/pin/"+e.id)}}]),Jugendstadtplan.Controllers.controller("LinksFormController",["$scope",function(e){e.newLink={},e.addLink=function(){void 0===e.model.links&&(e.model.links=[]),e.model.links.push(e.newLink),e.newLink={}},e.isLinkValid=function(e){return void 0===e.titel||0===e.titel.length?!1:void 0===e.url||0===e.url.length?!1:!0}}]),Jugendstadtplan.Controllers.controller("AdresseFormController",["$scope",function(e){e.isAdresseValid=function(e){return void 0===e.strasse||0===e.strasse.length?!1:void 0===e.ort||0===e.ort.length?!1:!0}}]),Jugendstadtplan.Controllers.controller("AnsprechpartnerFormController",["$scope",function(e){e.newAnsprechpartner={},e.addAnsprechpartner=function(){void 0===e.model.ansprechpartner&&(e.model.ansprechpartner=[]),e.model.ansprechpartner.push(e.newAnsprechpartner),e.newAnsprechpartner={}},e.isAnsprechpartnerValid=function(e){return void 0===e.name||0===e.name.length?!1:void 0===e.email||0===e.email.length?!1:!0}}]),angular.module("jugendstadtplan.startseite").config(function(e){e.state("Startseite",{url:"/startseite",views:{main:{controller:"StartseiteController",templateUrl:"src/app/startseite/views/startseite.tpl.html"}},data:{pageTitle:"Startseite"}})}),angular.module("jugendstadtplan.startseite").controller("StartseiteController",["$scope","$location","Pin",function(e,n,t){angular.extend(e,{center:{lat:50.732829246726,lng:7.0937004090117,zoom:13},defaults:{scrollWheelZoom:!1}}),e.markers=[],t.query(function(n){angular.forEach(n,function(n){if(null!=n.longitude){var t={lat:n.latitude,lng:n.longitude,title:n.titel,message:"<h3>"+n.titel+"</h3>"+n.beschreibung+'<small><a href="/#/pin/'+n.id+'">Mehr</a></small>'};e.markers.push(t)}})})}]),Jugendstadtplan.Controllers.controller("TerminFormController",["$scope",function(e){e.wochentage=["Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag","Sonntag"],e.newTermin={},e.addTermin=function(){void 0===e.pin.termine&&(e.pin.termine=[]),e.pin.termine.push(e.newTermin),e.newTermin={}},e.isTerminValid=function(e){return void 0===e.beginn||0===e.beginn?!1:e.ganztaegig===!0||void 0!==e.beginn_uhrzeit&&0!==e.beginn_uhrzeit?!0:!1},e.woche_des_monats=[{id:0,label:"Jede Woche"},{id:1,label:"Jede 1. Woche"},{id:2,label:"Jede 2. Woche"},{id:3,label:"Jede 3. Woche"},{id:4,label:"Jede 4. Woche"},{id:5,label:"Jede 5. Woche"}],e.newWiederholung={},e.addWiederholung=function(){void 0===e.newTermin.wiederholungen&&(e.newTermin.wiederholungen=[]),e.newTermin.wiederholungen.push(e.newWiederholung),e.newWiederholung={}},e.isWiederholungValid=function(e){return void 0===e.wochentag||0===e.wochentag?!1:!0}}]),angular.module("jugendstadtplan.traeger").config(function(e){e.state("Liste: Traeger",{url:"/traeger",views:{main:{controller:"TraegerController",templateUrl:"src/app/traeger/views/liste.tpl.html"}},data:{pageTitle:"Träger"}})}),Jugendstadtplan.Controllers.controller("TraegerController",["$scope","$location","Traeger",function(e,n,t){e.traeger=t.query(),e.viewTraeger=function(e){n.path("/traeger/"+e.id)}}]),angular.module("jugendstadtplan.traeger").config(function(e){e.state("Detail: Traeger",{url:"/traeger/{id:[0-9]+}",views:{main:{controller:"TraegerDetailController",templateUrl:"src/app/traeger/views/detail.tpl.html"}},resolve:{traegerDetail:["$stateParams","Traeger",function(e,n){return n.get({},{id:e.id})}]},data:{pageTitle:"Träger"}})}),Jugendstadtplan.Controllers.controller("TraegerDetailController",["$scope","traegerDetail",function(e,n){e.traeger=n,angular.extend(e,{center:{lat:50.732829246726,lng:7.0937004090117,zoom:13},defaults:{scrollWheelZoom:!1}}),e.markers=[],n.$promise.then(function(){angular.forEach(n.pins,function(n,t){var r={lat:n.latitude,lng:n.longitude,title:n.titel,message:"<h3>"+n.titel+"</h3>"+n.beschreibung+'<small><a href="/#/pin/'+n.id+'">Mehr</a></small>'};e.markers.push(r)})})}]),angular.module("jugendstadtplan.traeger").config(function(e){e.state("Form: Traeger",{url:"/traeger/create",views:{main:{controller:"TraegerFormController",templateUrl:"src/app/traeger/views/form.tpl.html"}},data:{pageTitle:"Träger erstellen"}})}),Jugendstadtplan.Controllers.controller("TraegerFormController",["$scope","$location","Traeger","Kategorie","Upload",function(e,n,t,r,a){e.kategorien=r.query(),e.traeger=new t,e.traegers=t.query(),e.newTraeger=function(){e.traeger=new t,e.editing=!1},e.save=function(){e.traeger.id?t.update(e.traeger).then(function(){e.newTraeger()},function(){alert("Ein Träger mit dieser Email-Adresse existiert bereits!")}):e.traeger.$save().then(function(n){e.traegers.push(n),e.newTraeger()},function(){alert("Ein Träger mit dieser Email-Adresse existiert bereits!")})},e.setActiveTraeger=function(n){e.traeger=n,e.editing=!0},e.remove=function(n){t["delete"](n,function(){var t=e.traegers.indexOf(n);-1!=t&&e.traegers.splice(t,1)})},e.onFileSelect=function(n){for(var t=function(n){a.upload({url:"app_dev.php/img/upload",method:"POST",data:{myObj:e.myModelObj},file:n}).progress(function(e){console.log("percent: "+parseInt(100*e.loaded/e.total))}).success(function(t,r,a,l){void 0===e.traeger.bilder&&(e.traeger.bilder=[]),n.tmp_name=t.folder,e.traeger.bilder.push(n)})},r=0;r<n.length;r++){var l=n[r];e.upload=t(l)}},e.newAdresse={},e.addAdresse=function(){void 0===e.traeger.adressen&&(e.traeger.adressen=[]),e.traeger.adressen.push(e.newAdresse),e.newAdresse={}},e.isAdresseValid=function(e){return void 0===e.strasse||0===e.strasse.length?!1:void 0===e.ort||0===e.ort.length?!1:!0}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9waW5zL1BpbnNNb2R1bGUuanMiLCJhcHAvbGlua3MvTGlua3NNb2R1bGUuanMiLCJhcHAvYWRyZXNzZS9BZHJlc3NlTW9kdWxlLmpzIiwiYXBwL2Fuc3ByZWNocGFydG5lci9BbnNwcmVjaHBhcnRuZXJNb2R1bGUuanMiLCJhcHAvc3RhcnRzZWl0ZS9TdGFydHNlaXRlTW9kdWxlLmpzIiwiYXBwL3Rlcm1pbi9UZXJtaW5Nb2R1bGUuanMiLCJhcHAvdHJhZWdlci9UcmFlZ2VyTW9kdWxlLmpzIiwiYXBwL2FwcC5qcyIsImNvbW1vbi9wbHVzT25lL3BsdXNPbmUuanMiLCJjb21tb24vcmVzb3VyY2VzL0p1Z2VuZHN0YWR0cGxhbkFwaS5qcyIsImFwcC9waW5zL1BpbkRldGFpbENvbnRyb2xsZXIuanMiLCJhcHAvcGlucy9QaW5Gb3JtQ29udHJvbGxlci5qcyIsImFwcC9waW5zL1BpbnNDb250cm9sbGVyLmpzIiwiYXBwL2xpbmtzL0xpbmtzRm9ybUNvbnRyb2xsZXIuanMiLCJhcHAvYWRyZXNzZS9BZHJlc3NlRm9ybUNvbnRyb2xsZXIuanMiLCJhcHAvYW5zcHJlY2hwYXJ0bmVyL0Fuc3ByZWNocGFydG5lckZvcm1Db250cm9sbGVyLmpzIiwiYXBwL3N0YXJ0c2VpdGUvU3RhcnRzZWl0ZUNvbnRyb2xsZXIuanMiLCJhcHAvdGVybWluL1Rlcm1pbkZvcm1Db250cm9sbGVyLmpzIiwiYXBwL3RyYWVnZXIvVHJhZWdlckNvbnRyb2xsZXIuanMiLCJhcHAvdHJhZWdlci9UcmFlZ2VyRGV0YWlsQ29udHJvbGxlci5qcyIsImFwcC90cmFlZ2VyL1RyYWVnZXJGb3JtQ29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiSnVnZW5kc3RhZHRwbGFuIiwiQ29udHJvbGxlcnMiLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIm90aGVyd2lzZSIsInJ1biIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCIkbG9jYXRpb24iLCIkb24iLCJldmVudCIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImZyb21TdGF0ZSIsImZyb21QYXJhbXMiLCJpc0RlZmluZWQiLCJkYXRhIiwicGFnZVRpdGxlIiwiZGlyZWN0aXZlIiwibGluayIsInNjb3BlIiwiZWxlbWVudCIsImF0dHJzIiwiZ2FwaSIsInBsdXNvbmUiLCJyZW5kZXIiLCJzaXplIiwiaHJlZiIsImp1Z2VuZHN0YWR0cGxhbkFwaSIsImJhY2tlbmRQcmVmaXgiLCJwcm92aWRlciIsInRoaXMiLCIkZ2V0IiwiJHJlc291cmNlIiwiYmFja2VuZFVybCIsImdldCIsIm1ldGhvZCIsInVybCIsInBhcmFtcyIsImlkIiwidXBkYXRlIiwic2F2ZSIsImRlbGV0ZSIsInN0YXRlIiwidmlld3MiLCJtYWluIiwidGVtcGxhdGVVcmwiLCJyZXNvbHZlIiwicGluRGV0YWlsIiwiJHN0YXRlUGFyYW1zIiwiUGluIiwibWFya2VycyIsImNlbnRlciIsImxhdCIsImxuZyIsInpvb20iLCIkcHJvbWlzZSIsInRoZW4iLCJwaW4iLCJleHRlbmQiLCJkZWZhdWx0cyIsInNjcm9sbFdoZWVsWm9vbSIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwibWFya2VyIiwidGl0bGUiLCJ0aXRlbCIsImZvY3VzIiwibWVzc2FnZSIsImJlc2NocmVpYnVuZyIsInB1c2giLCJUcmFlZ2VyIiwiS2F0ZWdvcmllIiwia2F0ZWdvcmllbiIsInF1ZXJ5IiwicGlucyIsInRyYWVnZXJzIiwiZXZlbnRzIiwiYXJncyIsImxlYWZFdmVudCIsImxlYWZsZXRFdmVudCIsImxhdGxuZyIsImRyYWdnYWJsZSIsIm5ld1BpbiIsImVkaXRpbmciLCIkc2F2ZSIsInJlc3BvbnNlIiwic2V0QWN0aXZlUGluIiwicmVtb3ZlIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiYmFycmllcmVmcmVpaGVpdHNncmFkZSIsImtvc3RlbmFydGVuIiwibWluZGVzdGFsdGVycyIsInZpZXdQaW4iLCJwYXRoIiwibmV3TGluayIsImFkZExpbmsiLCJ1bmRlZmluZWQiLCJtb2RlbCIsImxpbmtzIiwiaXNMaW5rVmFsaWQiLCJsZW5ndGgiLCJpc0FkcmVzc2VWYWxpZCIsImFkcmVzc2UiLCJzdHJhc3NlIiwib3J0IiwibmV3QW5zcHJlY2hwYXJ0bmVyIiwiYWRkQW5zcHJlY2hwYXJ0bmVyIiwiYW5zcHJlY2hwYXJ0bmVyIiwiaXNBbnNwcmVjaHBhcnRuZXJWYWxpZCIsIm5hbWUiLCJlbWFpbCIsImZvckVhY2giLCJpdGVtIiwid29jaGVudGFnZSIsIm5ld1Rlcm1pbiIsImFkZFRlcm1pbiIsInRlcm1pbmUiLCJpc1Rlcm1pblZhbGlkIiwidGVybWluIiwiYmVnaW5uIiwiZ2FuenRhZWdpZyIsImJlZ2lubl91aHJ6ZWl0Iiwid29jaGVfZGVzX21vbmF0cyIsImxhYmVsIiwibmV3V2llZGVyaG9sdW5nIiwiYWRkV2llZGVyaG9sdW5nIiwid2llZGVyaG9sdW5nZW4iLCJpc1dpZWRlcmhvbHVuZ1ZhbGlkIiwid2llZGVyaG9sdW5nIiwid29jaGVudGFnIiwidHJhZWdlciIsInZpZXdUcmFlZ2VyIiwidHJhZWdlckRldGFpbCIsImtleSIsIlVwbG9hZCIsIm5ld1RyYWVnZXIiLCJhbGVydCIsInNldEFjdGl2ZVRyYWVnZXIiLCJvbkZpbGVTZWxlY3QiLCIkZmlsZXMiLCJkb1VwbG9hZCIsImZpbGUiLCJ1cGxvYWQiLCJteU9iaiIsIm15TW9kZWxPYmoiLCJwcm9ncmVzcyIsImV2dCIsImNvbnNvbGUiLCJsb2ciLCJwYXJzZUludCIsImxvYWRlZCIsInRvdGFsIiwic3VjY2VzcyIsInN0YXR1cyIsImhlYWRlcnMiLCJiaWxkZXIiLCJ0bXBfbmFtZSIsImZvbGRlciIsImkiLCJuZXdBZHJlc3NlIiwiYWRkQWRyZXNzZSIsImFkcmVzc2VuIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBQUMsT0FBQSx3QkFDQSxZQUFBLHdCQUFBLGtDQUFBLDJCQ0RBRCxRQUFBQyxPQUFBLDRCQ0FBRCxRQUFBQyxPQUFBLDhCQ0FBRCxRQUFBQyxPQUFBLHNDQ0FBRCxR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T0FHQXBCLE1BQUFrSSxNQUFBM0ksRUFBQTRJLFlBQ0FILEtBQUFBLElBT0FJLFNBQUEsU0FBQUMsR0FDQUMsUUFBQUMsSUFBQSxZQUFBQyxTQUFBLElBQUFILEVBQUFJLE9BQUFKLEVBQUFLLFVBQ0FDLFFBQUEsU0FBQTNJLEVBQUE0SSxFQUFBQyxFQUFBNUosR0FFQWtHLFNBQUE1RixFQUFBOEgsUUFBQXlCLFNBQ0F2SixFQUFBOEgsUUFBQXlCLFdBRUFkLEVBQUFlLFNBQUEvSSxFQUFBZ0osT0FDQXpKLEVBQUE4SCxRQUFBeUIsT0FBQXhGLEtBQUEwRSxNQVFBaUIsRUFBQSxFQUFBQSxFQUFBbkIsRUFBQXZDLE9BQUEwRCxJQUFBLENBQ0EsR0FBQWpCLEdBQUFGLEVBQUFtQixFQUNBMUosR0FBQTBJLE9BQUFGLEVBQUFDLEtBTUF6SSxFQUFBMkosY0FDQTNKLEVBQUE0SixXQUFBLFdBQ0FoRSxTQUFBNUYsRUFBQThILFFBQUErQixXQUNBN0osRUFBQThILFFBQUErQixhQUVBN0osRUFBQThILFFBQUErQixTQUFBOUYsS0FBQS9ELEVBQUEySixZQUNBM0osRUFBQTJKLGVBR0EzSixFQUFBaUcsZUFBQSxTQUFBQyxHQUNBLE1BQUFOLFVBQUFNLEVBQUFDLFNBQUEsSUFBQUQsRUFBQUMsUUFBQUgsUUFDQSxFQUNBSixTQUFBTSxFQUFBRSxLQUFBLElBQUFGLEVBQUFFLElBQUFKLFFBQ0EsR0FFQSIsImZpbGUiOiJqdWdlbmRzdGFkdHBsYW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoICdqdWdlbmRzdGFkdHBsYW4ucGlucycsIFtcbiAgJ3VpLnJvdXRlcicsICdqdWdlbmRzdGFkdHBsYW4ubGlua3MnLCAnanVnZW5kc3RhZHRwbGFuLmFuc3ByZWNocGFydG5lcicsICdqdWdlbmRzdGFkdHBsYW4udGVybWluJ1xuXSk7IiwiYW5ndWxhci5tb2R1bGUoICdqdWdlbmRzdGFkdHBsYW4ubGlua3MnLCBbXG5dKTsiLCJhbmd1bGFyLm1vZHVsZSggJ2p1Z2VuZHN0YWR0cGxhbi5hZHJlc3NlJywgW1xuXSk7IiwiYW5ndWxhci5tb2R1bGUoICdqdWdlbmRzdGFkdHBsYW4uYW5zcHJlY2hwYXJ0bmVyJywgW1xuXSk7IiwiYW5ndWxhci5tb2R1bGUoICdqdWdlbmRzdGFkdHBsYW4uc3RhcnRzZWl0ZScsIFtcbiAgJ3VpLnJvdXRlcicsXG4gICdsZWFmbGV0LWRpcmVjdGl2ZSdcbl0pOyIsImFuZ3VsYXIubW9kdWxlKCAnanVnZW5kc3RhZHRwbGFuLnRlcm1pbicsIFtcbl0pOyIsImFuZ3VsYXIubW9kdWxlKCAnanVnZW5kc3RhZHRwbGFuLnRyYWVnZXInLCBbXG4gICd1aS5yb3V0ZXInLCAnanVnZW5kc3RhZHRwbGFuLmxpbmtzJywgJ2p1Z2VuZHN0YWR0cGxhbi5hbnNwcmVjaHBhcnRuZXInXG5dKTsiLCJ2YXIgSnVnZW5kc3RhZHRwbGFuID0gSnVnZW5kc3RhZHRwbGFuIHx8IHt9O1xuSnVnZW5kc3RhZHRwbGFuLkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ2p1Z2VuZHN0YWR0cGxhbi5jb250cm9sbGVycycsIFtdKTtcblxuYW5ndWxhci5tb2R1bGUoICdqdWdlbmRzdGFkdHBsYW4nLCBbXG4gICduZ1Jlc291cmNlJyxcbiAgJ25nU2FuaXRpemUnLFxuICAndWkucm91dGVyJyxcbiAgJ2xlYWZsZXQtZGlyZWN0aXZlJyxcbiAgJ3RleHRBbmd1bGFyJyxcbiAgJ25nRmlsZVVwbG9hZCcsXG4gICdqdWdlbmRzdGFkdHBsYW4uYXBpJyxcbiAgJ2p1Z2VuZHN0YWR0cGxhbi5zdGFydHNlaXRlJyxcbiAgJ2p1Z2VuZHN0YWR0cGxhbi5waW5zJyxcbiAgJ2p1Z2VuZHN0YWR0cGxhbi50cmFlZ2VyJyxcbiAgJ2p1Z2VuZHN0YWR0cGxhbi5jb250cm9sbGVycydcbl0pXG5cbi5jb25maWcoIGZ1bmN0aW9uIG15QXBwQ29uZmlnICggJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciApIHtcbiAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSggJy9zdGFydHNlaXRlJyApO1xufSlcblxuLnJ1biggZnVuY3Rpb24gcnVuICgpIHtcbn0pXG5cbi5jb250cm9sbGVyKCAnQXBwQ3RybCcsIFsgJyRzY29wZScsICckbG9jYXRpb24nLCBmdW5jdGlvbiBBcHBDdHJsKCAkc2NvcGUsICRsb2NhdGlvbiApe1xuICAkc2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMpe1xuICAgIGlmICggYW5ndWxhci5pc0RlZmluZWQoIHRvU3RhdGUuZGF0YS5wYWdlVGl0bGUgKSApIHtcbiAgICAgICRzY29wZS5wYWdlVGl0bGUgPSB0b1N0YXRlLmRhdGEucGFnZVRpdGxlICsgJyB8IEp1Z2VuZHN0YWR0cGxhbicgO1xuICAgIH1cbiAgfSk7XG59XSlcblxuOyIsImFuZ3VsYXIubW9kdWxlKCAncGx1c09uZScsIFtdIClcblxuLmRpcmVjdGl2ZSggJ3BsdXNPbmUnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICBsaW5rOiBmdW5jdGlvbiggc2NvcGUsIGVsZW1lbnQsIGF0dHJzICkge1xuICAgICAgZ2FwaS5wbHVzb25lLnJlbmRlciggZWxlbWVudFswXSwge1xuICAgICAgICBcInNpemVcIjogXCJtZWRpdW1cIixcbiAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL2JpdC5seS9uZ0JvaWxlcnBsYXRlXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pXG5cbjtcblxuIiwidmFyIGp1Z2VuZHN0YWR0cGxhbkFwaSA9IGFuZ3VsYXIubW9kdWxlKCdqdWdlbmRzdGFkdHBsYW4uYXBpJywgWyduZ1Jlc291cmNlJ10pO1xuXG52YXIgYmFja2VuZFByZWZpeCA9ICcvYXBwX2Rldi5waHAnO1xuXG5qdWdlbmRzdGFkdHBsYW5BcGkucHJvdmlkZXIoJ1BpbicsIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJGdldCA9IFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xuICAgICAgICB2YXIgYmFja2VuZFVybCA9IGJhY2tlbmRQcmVmaXggKyAnL3BpbnMnO1xuICAgICAgICByZXR1cm4gJHJlc291cmNlKGJhY2tlbmRVcmwsIHt9LCB7XG4gICAgICAgICAgICBnZXQ6IHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgIHVybDogYmFja2VuZFVybCArICcvOmlkJyxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHsgaWQ6J0BpZCd9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdXBkYXRlOiB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICAgICAgICB1cmw6IGJhY2tlbmRVcmwgKyAnL3VwZGF0ZS86aWQnLFxuICAgICAgICAgICAgICAgIHBhcmFtczogeyBpZDonQGlkJ31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYXZlOiB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgdXJsOiBiYWNrZW5kVXJsICsgJy9jcmVhdGUnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVsZXRlOiB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICAgICAgICB1cmw6IGJhY2tlbmRVcmwgKyAnL2RlbGV0ZS86aWQnLFxuICAgICAgICAgICAgICAgIHBhcmFtczogeyBpZDonQGlkJ31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfV07XG59KTtcblxuanVnZW5kc3RhZHRwbGFuQXBpLnByb3ZpZGVyKCdUcmFlZ2VyJywgZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kZ2V0ID0gWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XG4gICAgICAgIHZhciBiYWNrZW5kVXJsID0gYmFja2VuZFByZWZpeCArICcvdHJhZWdlcic7XG4gICAgICAgIHJldHVybiAkcmVzb3VyY2UoYmFja2VuZFVybCwge30sIHtcbiAgICAgICAgICAgIGdldDoge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICAgICAgdXJsOiBiYWNrZW5kVXJsICsgJy86aWQnLFxuICAgICAgICAgICAgICAgIHBhcmFtczogeyBpZDonQGlkJ31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cGRhdGU6IHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgICAgICAgIHVybDogYmFja2VuZFVybCArICcvdXBkYXRlLzppZCcsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7IGlkOidAaWQnfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhdmU6IHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICB1cmw6IGJhY2tlbmRVcmwgKyAnL2NyZWF0ZSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWxldGU6IHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICAgICAgICAgIHVybDogYmFja2VuZFVybCArICcvZGVsZXRlLzppZCcsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7IGlkOidAaWQnfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XTtcbn0pO1xuXG5qdWdlbmRzdGFkdHBsYW5BcGkucHJvdmlkZXIoJ0thdGVnb3JpZScsIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJGdldCA9IFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xuICAgICAgICB2YXIgYmFja2VuZFVybCA9IGJhY2tlbmRQcmVmaXggKyAnL2thdGVnb3JpZSc7XG4gICAgICAgIHJldHVybiAkcmVzb3VyY2UoYmFja2VuZFVybCk7XG4gICAgfV07XG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnanVnZW5kc3RhZHRwbGFuLnBpbnMnKS5jb25maWcoZnVuY3Rpb24gY29uZmlnKCAkc3RhdGVQcm92aWRlciApIHtcbiAgXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCAnRGV0YWlsOiBQaW4nLCB7XG4gICAgdXJsOiAnL3Bpbi97aWQ6WzAtOV0rfScsXG4gICAgdmlld3M6IHtcbiAgICAgIFwibWFpblwiOiB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdQaW5EZXRhaWxDb250cm9sbGVyJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdzcmMvYXBwL3BpbnMvdmlld3MvZGV0YWlsLnRwbC5odG1sJ1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVzb2x2ZToge1xuICAgICAgcGluRGV0YWlsOiBbICckc3RhdGVQYXJhbXMnLCAnUGluJywgZnVuY3Rpb24oJHN0YXRlUGFyYW1zLCBQaW4pIHtcbiAgICAgICAgcmV0dXJuIFBpbi5nZXQoe30se2lkOiAkc3RhdGVQYXJhbXMuaWR9KTtcbiAgICAgIH1dXG4gICAgfSxcbiAgICBkYXRhOnsgcGFnZVRpdGxlOiAnUGluJyB9XG4gIH0pO1xuXG59KTtcblxuSnVnZW5kc3RhZHRwbGFuLkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoICdQaW5EZXRhaWxDb250cm9sbGVyJywgWyAnJHNjb3BlJywgJ3BpbkRldGFpbCcsIGZ1bmN0aW9uIFBpbkRldGFpbENvbnRyb2xsZXIoICRzY29wZSwgcGluRGV0YWlsICkge1xuICAgICRzY29wZS5tYXJrZXJzID0gW107XG4gICAgJHNjb3BlLmNlbnRlciA9IHtcbiAgICAgICAgbGF0OiA1MC43MzI4MjkyNDY3MjYsXG4gICAgICAgIGxuZzogNy4wOTM3MDA0MDkwMTE3LFxuICAgICAgICB6b29tOiAxM1xuICAgIH07XG5cbiAgICBwaW5EZXRhaWwuJHByb21pc2UudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5waW4gPSBwaW5EZXRhaWw7XG5cbiAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRzY29wZSwge1xuICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFdoZWVsWm9vbTogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJHNjb3BlLmNlbnRlciA9IHtcbiAgICAgICAgICAgICAgICBsYXQ6IHBpbkRldGFpbC5sYXRpdHVkZSxcbiAgICAgICAgICAgICAgICBsbmc6IHBpbkRldGFpbC5sb25naXR1ZGUsXG4gICAgICAgICAgICAgICAgem9vbTogMTVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBtYXJrZXIgPSB7XG4gICAgICAgICAgICAgICAgbGF0OiBwaW5EZXRhaWwubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgbG5nOiBwaW5EZXRhaWwubG9uZ2l0dWRlLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBwaW5EZXRhaWwudGl0ZWwsXG4gICAgICAgICAgICAgICAgZm9jdXM6IHRydWUsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJzxoMz4nICsgcGluRGV0YWlsLnRpdGVsICsgJzwvaDM+JyArIHBpbkRldGFpbC5iZXNjaHJlaWJ1bmcsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMucHVzaChtYXJrZXIpO1xuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRzY29wZSwge1xuICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFdoZWVsWm9vbTogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICk7XG59XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2p1Z2VuZHN0YWR0cGxhbi5waW5zJykuY29uZmlnKGZ1bmN0aW9uIGNvbmZpZyggJHN0YXRlUHJvdmlkZXIgKSB7XG5cbiAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSggJ0Zvcm06IFBpbicsIHtcbiAgICAgICAgdXJsOiAnL3Bpbi9jcmVhdGUnLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgXCJtYWluXCI6IHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnUGluRm9ybUNvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3JjL2FwcC9waW5zL3ZpZXdzL2Zvcm0udHBsLmh0bWwnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6eyBwYWdlVGl0bGU6ICdQaW4gZXJzdGVsbGVuJyB9XG4gICAgfSk7XG5cbn0pO1xuXG5KdWdlbmRzdGFkdHBsYW4uQ29udHJvbGxlcnMuY29udHJvbGxlciggJ1BpbkZvcm1Db250cm9sbGVyJywgWyAnJHNjb3BlJywgJyRsb2NhdGlvbicsICdQaW4nLCAnVHJhZWdlcicsICdLYXRlZ29yaWUnLCBmdW5jdGlvbiBQaW5Gb3JtQ29udHJvbGxlciggJHNjb3BlLCAkbG9jYXRpb24sIFBpbiwgVHJhZWdlciwgS2F0ZWdvcmllICkge1xuICAgICRzY29wZS5rYXRlZ29yaWVuID0gS2F0ZWdvcmllLnF1ZXJ5KCk7XG4gICAgJHNjb3BlLnBpbiA9IG5ldyBQaW4oKTtcbiAgICAkc2NvcGUucGlucyA9IFBpbi5xdWVyeSgpO1xuICAgICRzY29wZS50cmFlZ2VycyA9IFRyYWVnZXIucXVlcnkoKTtcblxuICAgIGFuZ3VsYXIuZXh0ZW5kKCRzY29wZSwge1xuICAgICAgICBjZW50ZXI6IHtcbiAgICAgICAgICAgIGxhdDogNTAuNzMyODI5MjQ2NzI2LFxuICAgICAgICAgICAgbG5nOiA3LjA5MzcwMDQwOTAxMTcsXG4gICAgICAgICAgICB6b29tOiAxM1xuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0czoge1xuICAgICAgICAgICAgc2Nyb2xsV2hlZWxab29tOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBldmVudHM6IHt9XG4gICAgfSk7XG5cbiAgICAkc2NvcGUucGluLm1hcmtlcnMgPSBbXTtcbiAgICAkc2NvcGUuJG9uKFwibGVhZmxldERpcmVjdGl2ZU1hcC5jbGlja1wiLCBmdW5jdGlvbihldmVudCwgYXJncyl7XG4gICAgICAgIHZhciBsZWFmRXZlbnQgPSBhcmdzLmxlYWZsZXRFdmVudDtcblxuICAgICAgICAkc2NvcGUucGluLm1hcmtlcnNbMF0gPSB7XG4gICAgICAgICAgICBsYXQ6IGxlYWZFdmVudC5sYXRsbmcubGF0LFxuICAgICAgICAgICAgbG5nOiBsZWFmRXZlbnQubGF0bG5nLmxuZyxcbiAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGZvY3VzOiB0cnVlXG4gICAgICAgIH07XG4gICAgfSk7XG5cbiAgICAkc2NvcGUubmV3UGluID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5waW4gPSBuZXcgUGluKCk7XG4gICAgICAgICRzY29wZS5waW4ubWFya2VycyA9IFtdO1xuICAgICAgICAkc2NvcGUuZWRpdGluZyA9IGZhbHNlO1xuICAgIH07XG5cbiAgICAkc2NvcGUuc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJHNjb3BlLnBpbi5pZCkge1xuICAgICAgICAgICAgUGluLnVwZGF0ZSgkc2NvcGUucGluKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRzY29wZS5waW4uJHNhdmUoKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnBpbnMucHVzaChyZXNwb25zZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAkc2NvcGUubmV3UGluKCk7XG4gICAgfTtcblxuICAgICRzY29wZS5zZXRBY3RpdmVQaW4gPSBmdW5jdGlvbihwaW4pIHtcbiAgICAgICAgJHNjb3BlLnBpbiA9IHBpbjtcbiAgICAgICAgJHNjb3BlLnBpbi5tYXJrZXJzID0gW107XG4gICAgICAgIGlmIChwaW4ubG9uZ2l0dWRlICE9IG51bGwpIHtcbiAgICAgICAgICAgICRzY29wZS5waW4ubWFya2Vyc1swXSA9IHtcbiAgICAgICAgICAgICAgICBsYXQ6IHBpbi5sYXRpdHVkZSxcbiAgICAgICAgICAgICAgICBsbmc6IHBpbi5sb25naXR1ZGUsXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGZvY3VzOiB0cnVlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgICRzY29wZS5lZGl0aW5nID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLnJlbW92ZSA9IGZ1bmN0aW9uKHBpbikge1xuICAgICAgICBQaW4uZGVsZXRlKHBpbiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUucGlucy5pbmRleE9mKHBpbik7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucGlucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG5cbiAgICAvLyBCYXJyaWVyZWZyZWloZWl0c2dyYWRlXG4gICAgJHNjb3BlLmJhcnJpZXJlZnJlaWhlaXRzZ3JhZGUgPSBbICdHdXQnLCAnVGVpbHdlaXNlJywgJ05pY2h0IGJhcnJpZXJlZnJlaScgXTtcblxuXG4gICAgLy8gS29zdGVuYXJ0ZW5cbiAgICAkc2NvcGUua29zdGVuYXJ0ZW4gPSBbICdLb3N0ZW5sb3MnLCAnS29zdGVucGZsaWNodGlnJyBdO1xuXG5cbiAgICAvLyBNaW5kZXN0YWx0ZXJcbiAgICAkc2NvcGUubWluZGVzdGFsdGVycyA9IFsgJ2FiIDEyJywgJ2FiIDE2JywgJ2FiIDE4JywgJ2FiIDIxJyBdO1xuXG5cblxufV0pOyIsImFuZ3VsYXIubW9kdWxlKCdqdWdlbmRzdGFkdHBsYW4ucGlucycpLmNvbmZpZyhmdW5jdGlvbiBjb25maWcoICRzdGF0ZVByb3ZpZGVyICkge1xuICBcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoICdMaXN0ZTogUGluJywge1xuICAgIHVybDogJy9waW5zJyxcbiAgICB2aWV3czoge1xuICAgICAgXCJtYWluXCI6IHtcbiAgICAgICAgY29udHJvbGxlcjogJ1BpbnNDb250cm9sbGVyJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdzcmMvYXBwL3BpbnMvdmlld3MvbGlzdC50cGwuaHRtbCdcbiAgICAgIH1cbiAgICB9LFxuICAgIGRhdGE6eyBwYWdlVGl0bGU6ICdQaW5zJyB9XG4gIH0pO1xuXG59KTtcblxuSnVnZW5kc3RhZHRwbGFuLkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoICdQaW5zQ29udHJvbGxlcicsIFsgJyRzY29wZScsICckbG9jYXRpb24nLCAnUGluJywgZnVuY3Rpb24gUGluc0NvbnRyb2xsZXIoICRzY29wZSwgJGxvY2F0aW9uLCBQaW4gKSB7XG4gICAgJHNjb3BlLnBpbnMgPSBQaW4ucXVlcnkoKTtcblxuICAgICRzY29wZS52aWV3UGluID0gZnVuY3Rpb24gKHBpbikge1xuICAgICAgJGxvY2F0aW9uLnBhdGgoJy9waW4vJytwaW4uaWQpO1xuICAgIH07XG5cbn1dKTsiLCJKdWdlbmRzdGFkdHBsYW4uQ29udHJvbGxlcnMuY29udHJvbGxlciggJ0xpbmtzRm9ybUNvbnRyb2xsZXInLCBbICckc2NvcGUnLFxuICAgIGZ1bmN0aW9uKCRzY29wZSkge1xuXG4gICAgICAgIC8vIExpbmtzXG4gICAgICAgICRzY29wZS5uZXdMaW5rID0ge307XG4gICAgICAgICRzY29wZS5hZGRMaW5rID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLm1vZGVsLmxpbmtzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubW9kZWwubGlua3MgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRzY29wZS5tb2RlbC5saW5rcy5wdXNoKCRzY29wZS5uZXdMaW5rKTtcbiAgICAgICAgICAgICRzY29wZS5uZXdMaW5rID0ge307XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmlzTGlua1ZhbGlkID0gZnVuY3Rpb24obGluaykge1xuICAgICAgICAgICAgaWYgKGxpbmsudGl0ZWwgPT09IHVuZGVmaW5lZCB8fCBsaW5rLnRpdGVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGluay51cmwgPT09IHVuZGVmaW5lZCB8fCBsaW5rLnVybC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcblxuICAgIH1dKTsiLCJKdWdlbmRzdGFkdHBsYW4uQ29udHJvbGxlcnMuY29udHJvbGxlciggJ0FkcmVzc2VGb3JtQ29udHJvbGxlcicsIFsgJyRzY29wZScsXG4gICAgZnVuY3Rpb24oJHNjb3BlKSB7XG5cbiAgICAgICAgJHNjb3BlLmlzQWRyZXNzZVZhbGlkID0gZnVuY3Rpb24oYWRyZXNzZSkge1xuICAgICAgICAgICAgaWYgKGFkcmVzc2Uuc3RyYXNzZSA9PT0gdW5kZWZpbmVkIHx8IGFkcmVzc2Uuc3RyYXNzZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFkcmVzc2Uub3J0ID09PSB1bmRlZmluZWQgfHwgYWRyZXNzZS5vcnQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG5cbiAgICB9XSk7IiwiSnVnZW5kc3RhZHRwbGFuLkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoICdBbnNwcmVjaHBhcnRuZXJGb3JtQ29udHJvbGxlcicsIFsgJyRzY29wZScsXG4gICAgZnVuY3Rpb24oJHNjb3BlKSB7XG5cbiAgICAgICAgLy8gQW5zcHJlY2hwYXJ0bmVyXG4gICAgICAgICRzY29wZS5uZXdBbnNwcmVjaHBhcnRuZXIgPSB7fTtcbiAgICAgICAgJHNjb3BlLmFkZEFuc3ByZWNocGFydG5lciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCRzY29wZS5tb2RlbC5hbnNwcmVjaHBhcnRuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5tb2RlbC5hbnNwcmVjaHBhcnRuZXIgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRzY29wZS5tb2RlbC5hbnNwcmVjaHBhcnRuZXIucHVzaCgkc2NvcGUubmV3QW5zcHJlY2hwYXJ0bmVyKTtcbiAgICAgICAgICAgICRzY29wZS5uZXdBbnNwcmVjaHBhcnRuZXIgPSB7fTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuaXNBbnNwcmVjaHBhcnRuZXJWYWxpZCA9IGZ1bmN0aW9uKGFuc3ByZWNocGFydG5lcikge1xuICAgICAgICAgICAgaWYgKGFuc3ByZWNocGFydG5lci5uYW1lID09PSB1bmRlZmluZWQgfHwgYW5zcHJlY2hwYXJ0bmVyLm5hbWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbnNwcmVjaHBhcnRuZXIuZW1haWwgPT09IHVuZGVmaW5lZCB8fCBhbnNwcmVjaHBhcnRuZXIuZW1haWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG5cbiAgICB9XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2p1Z2VuZHN0YWR0cGxhbi5zdGFydHNlaXRlJykuY29uZmlnKGZ1bmN0aW9uIGNvbmZpZyggJHN0YXRlUHJvdmlkZXIgKSB7XG4gIFxuICAkc3RhdGVQcm92aWRlci5zdGF0ZSggJ1N0YXJ0c2VpdGUnLCB7XG4gICAgdXJsOiAnL3N0YXJ0c2VpdGUnLFxuICAgIHZpZXdzOiB7XG4gICAgICBcIm1haW5cIjoge1xuICAgICAgICBjb250cm9sbGVyOiAnU3RhcnRzZWl0ZUNvbnRyb2xsZXInLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3NyYy9hcHAvc3RhcnRzZWl0ZS92aWV3cy9zdGFydHNlaXRlLnRwbC5odG1sJ1xuICAgICAgfVxuICAgIH0sXG4gICAgZGF0YTp7IHBhZ2VUaXRsZTogJ1N0YXJ0c2VpdGUnIH1cbiAgfSk7XG5cbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgnanVnZW5kc3RhZHRwbGFuLnN0YXJ0c2VpdGUnKS5jb250cm9sbGVyKCAnU3RhcnRzZWl0ZUNvbnRyb2xsZXInLCBbICckc2NvcGUnLCAnJGxvY2F0aW9uJywgJ1BpbicsIGZ1bmN0aW9uIFN0YXJ0c2VpdGVDb250cm9sbGVyKCAkc2NvcGUsICRsb2NhdGlvbiwgUGluICkge1xuICAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUsIHtcbiAgICAgICAgY2VudGVyOiB7XG4gICAgICAgICAgICBsYXQ6IDUwLjczMjgyOTI0NjcyNixcbiAgICAgICAgICAgIGxuZzogNy4wOTM3MDA0MDkwMTE3LFxuICAgICAgICAgICAgem9vbTogMTNcbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdHM6IHtcbiAgICAgICAgICAgIHNjcm9sbFdoZWVsWm9vbTogZmFsc2VcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLm1hcmtlcnMgPSBbXTtcblxuICAgIFBpbi5xdWVyeShmdW5jdGlvbihwaW5zKSB7XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChwaW5zLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICBpZiAoaXRlbS5sb25naXR1ZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxhdDogaXRlbS5sYXRpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgbG5nOiBpdGVtLmxvbmdpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0udGl0ZWwsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICc8aDM+JyArIGl0ZW0udGl0ZWwgKyAnPC9oMz4nICsgaXRlbS5iZXNjaHJlaWJ1bmcgKyAnPHNtYWxsPjxhIGhyZWY9XCInICsgJy8jL3Bpbi8nICsgaXRlbS5pZCArICdcIj5NZWhyPC9hPjwvc21hbGw+J1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMucHVzaChtYXJrZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxufV0pOyIsIkp1Z2VuZHN0YWR0cGxhbi5Db250cm9sbGVycy5jb250cm9sbGVyKCAnVGVybWluRm9ybUNvbnRyb2xsZXInLCBbICckc2NvcGUnLFxuICAgIGZ1bmN0aW9uKCRzY29wZSkge1xuXG4gICAgICAgIC8vIFdvY2hlbnRhZ2VcbiAgICAgICAgJHNjb3BlLndvY2hlbnRhZ2UgPSBbICdNb250YWcnLCAnRGllbnN0YWcnLCAnTWl0dHdvY2gnLCAnRG9ubmVyc3RhZycsICdGcmVpdGFnJywgJ1NhbXN0YWcnLCAnU29ubnRhZycgXTtcblxuXG4gICAgICAgIC8vIFRlcm1pblxuICAgICAgICAkc2NvcGUubmV3VGVybWluID0ge307XG4gICAgICAgICRzY29wZS5hZGRUZXJtaW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICgkc2NvcGUucGluLnRlcm1pbmUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5waW4udGVybWluZSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHNjb3BlLnBpbi50ZXJtaW5lLnB1c2goJHNjb3BlLm5ld1Rlcm1pbik7XG4gICAgICAgICAgICAkc2NvcGUubmV3VGVybWluID0ge307XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmlzVGVybWluVmFsaWQgPSBmdW5jdGlvbih0ZXJtaW4pIHtcbiAgICAgICAgICAgIGlmICh0ZXJtaW4uYmVnaW5uID09PSB1bmRlZmluZWQgfHwgdGVybWluLmJlZ2lubiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGVybWluLmdhbnp0YWVnaWcgIT09IHRydWUgJiYgKHRlcm1pbi5iZWdpbm5fdWhyemVpdCA9PT0gdW5kZWZpbmVkIHx8IHRlcm1pbi5iZWdpbm5fdWhyemVpdCA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8vIFdpZWRlcmhvbHVuZ1xuICAgICAgICAkc2NvcGUud29jaGVfZGVzX21vbmF0cyA9IFtcbiAgICAgICAgICAgIHsgaWQ6IDAsIGxhYmVsOiAnSmVkZSBXb2NoZScgfSxcbiAgICAgICAgICAgIHsgaWQ6IDEsIGxhYmVsOiAnSmVkZSAxLiBXb2NoZScgfSxcbiAgICAgICAgICAgIHsgaWQ6IDIsIGxhYmVsOiAnSmVkZSAyLiBXb2NoZScgfSxcbiAgICAgICAgICAgIHsgaWQ6IDMsIGxhYmVsOiAnSmVkZSAzLiBXb2NoZScgfSxcbiAgICAgICAgICAgIHsgaWQ6IDQsIGxhYmVsOiAnSmVkZSA0LiBXb2NoZScgfSxcbiAgICAgICAgICAgIHsgaWQ6IDUsIGxhYmVsOiAnSmVkZSA1LiBXb2NoZScgfVxuICAgICAgICBdO1xuICAgICAgICAkc2NvcGUubmV3V2llZGVyaG9sdW5nID0ge307XG4gICAgICAgICRzY29wZS5hZGRXaWVkZXJob2x1bmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICgkc2NvcGUubmV3VGVybWluLndpZWRlcmhvbHVuZ2VuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3VGVybWluLndpZWRlcmhvbHVuZ2VuID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkc2NvcGUubmV3VGVybWluLndpZWRlcmhvbHVuZ2VuLnB1c2goJHNjb3BlLm5ld1dpZWRlcmhvbHVuZyk7XG4gICAgICAgICAgICAkc2NvcGUubmV3V2llZGVyaG9sdW5nID0ge307XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmlzV2llZGVyaG9sdW5nVmFsaWQgPSBmdW5jdGlvbih3aWVkZXJob2x1bmcpIHtcbiAgICAgICAgICAgIGlmICh3aWVkZXJob2x1bmcud29jaGVudGFnID09PSB1bmRlZmluZWQgfHwgd2llZGVyaG9sdW5nLndvY2hlbnRhZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuXG4gICAgfV0pOyIsImFuZ3VsYXIubW9kdWxlKCdqdWdlbmRzdGFkdHBsYW4udHJhZWdlcicpLmNvbmZpZyhmdW5jdGlvbiBjb25maWcoICRzdGF0ZVByb3ZpZGVyICkge1xuICBcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoICdMaXN0ZTogVHJhZWdlcicsIHtcbiAgICB1cmw6ICcvdHJhZWdlcicsXG4gICAgdmlld3M6IHtcbiAgICAgIFwibWFpblwiOiB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdUcmFlZ2VyQ29udHJvbGxlcicsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnc3JjL2FwcC90cmFlZ2VyL3ZpZXdzL2xpc3RlLnRwbC5odG1sJ1xuICAgICAgfVxuICAgIH0sXG4gICAgZGF0YTp7IHBhZ2VUaXRsZTogJ1Ryw6RnZXInIH1cbiAgfSk7XG5cbn0pO1xuXG5KdWdlbmRzdGFkdHBsYW4uQ29udHJvbGxlcnMuY29udHJvbGxlciggJ1RyYWVnZXJDb250cm9sbGVyJywgWyAnJHNjb3BlJywgJyRsb2NhdGlvbicsICdUcmFlZ2VyJywgZnVuY3Rpb24gVHJhZWdlckNvbnRyb2xsZXIoICRzY29wZSwgJGxvY2F0aW9uLCBUcmFlZ2VyICkge1xuICAgICRzY29wZS50cmFlZ2VyID0gVHJhZWdlci5xdWVyeSgpO1xuXG4gICAgJHNjb3BlLnZpZXdUcmFlZ2VyID0gZnVuY3Rpb24gKHRyYWVnZXIpIHtcbiAgICAgICRsb2NhdGlvbi5wYXRoKCcvdHJhZWdlci8nK3RyYWVnZXIuaWQpO1xuICAgIH07XG5cbn1dKTsiLCJhbmd1bGFyLm1vZHVsZSgnanVnZW5kc3RhZHRwbGFuLnRyYWVnZXInKS5jb25maWcoZnVuY3Rpb24gY29uZmlnKCAkc3RhdGVQcm92aWRlciApIHtcbiAgXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCAnRGV0YWlsOiBUcmFlZ2VyJywge1xuICAgIHVybDogJy90cmFlZ2VyL3tpZDpbMC05XSt9JyxcbiAgICB2aWV3czoge1xuICAgICAgXCJtYWluXCI6IHtcbiAgICAgICAgY29udHJvbGxlcjogJ1RyYWVnZXJEZXRhaWxDb250cm9sbGVyJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdzcmMvYXBwL3RyYWVnZXIvdmlld3MvZGV0YWlsLnRwbC5odG1sJ1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVzb2x2ZToge1xuICAgICAgdHJhZWdlckRldGFpbDogWyAnJHN0YXRlUGFyYW1zJywgJ1RyYWVnZXInLCBmdW5jdGlvbigkc3RhdGVQYXJhbXMsIFRyYWVnZXIpIHtcbiAgICAgICAgcmV0dXJuIFRyYWVnZXIuZ2V0KHt9LHtpZDogJHN0YXRlUGFyYW1zLmlkfSk7XG4gICAgICB9XVxuICAgIH0sXG4gICAgZGF0YTp7IHBhZ2VUaXRsZTogJ1Ryw6RnZXInIH1cbiAgfSk7XG5cbn0pO1xuXG5KdWdlbmRzdGFkdHBsYW4uQ29udHJvbGxlcnMuY29udHJvbGxlciggJ1RyYWVnZXJEZXRhaWxDb250cm9sbGVyJywgWyAnJHNjb3BlJywgJ3RyYWVnZXJEZXRhaWwnLCBmdW5jdGlvbiBUcmFlZ2VyRGV0YWlsQ29udHJvbGxlciggJHNjb3BlLCB0cmFlZ2VyRGV0YWlsICkge1xuICAgICRzY29wZS50cmFlZ2VyID0gdHJhZWdlckRldGFpbDtcblxuICAgIGFuZ3VsYXIuZXh0ZW5kKCRzY29wZSwge1xuICAgICAgICBjZW50ZXI6IHtcbiAgICAgICAgICAgIGxhdDogNTAuNzMyODI5MjQ2NzI2LFxuICAgICAgICAgICAgbG5nOiA3LjA5MzcwMDQwOTAxMTcsXG4gICAgICAgICAgICB6b29tOiAxM1xuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0czoge1xuICAgICAgICAgICAgc2Nyb2xsV2hlZWxab29tOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkc2NvcGUubWFya2VycyA9IFtdO1xuXG4gICAgdHJhZWdlckRldGFpbC4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBhbmd1bGFyLmZvckVhY2godHJhZWdlckRldGFpbC5waW5zLCBmdW5jdGlvbihpdGVtLCBrZXkpIHtcbiAgICAgICAgICAgIHZhciBtYXJrZXIgPSB7XG4gICAgICAgICAgICAgICAgbGF0OiBpdGVtLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgIGxuZzogaXRlbS5sb25naXR1ZGUsXG4gICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0udGl0ZWwsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJzxoMz4nICsgaXRlbS50aXRlbCArICc8L2gzPicgKyBpdGVtLmJlc2NocmVpYnVuZyArICc8c21hbGw+PGEgaHJlZj1cIicgKyAnLyMvcGluLycraXRlbS5pZCArICdcIj5NZWhyPC9hPjwvc21hbGw+J1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICRzY29wZS5tYXJrZXJzLnB1c2gobWFya2VyKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2p1Z2VuZHN0YWR0cGxhbi50cmFlZ2VyJykuY29uZmlnKGZ1bmN0aW9uIGNvbmZpZyggJHN0YXRlUHJvdmlkZXIgKSB7XG5cbiAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSggJ0Zvcm06IFRyYWVnZXInLCB7XG4gICAgICAgIHVybDogJy90cmFlZ2VyL2NyZWF0ZScsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICBcIm1haW5cIjoge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdUcmFlZ2VyRm9ybUNvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3JjL2FwcC90cmFlZ2VyL3ZpZXdzL2Zvcm0udHBsLmh0bWwnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6eyBwYWdlVGl0bGU6ICdUcsOkZ2VyIGVyc3RlbGxlbicgfVxuICAgIH0pO1xuXG59KTtcblxuSnVnZW5kc3RhZHRwbGFuLkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoICdUcmFlZ2VyRm9ybUNvbnRyb2xsZXInLCBbICckc2NvcGUnLCAnJGxvY2F0aW9uJywgJ1RyYWVnZXInLCAnS2F0ZWdvcmllJywgJ1VwbG9hZCcsIGZ1bmN0aW9uIFRyYWVnZXJGb3JtQ29udHJvbGxlciggJHNjb3BlLCAkbG9jYXRpb24sIFRyYWVnZXIsIEthdGVnb3JpZSwgVXBsb2FkICkge1xuICAgICRzY29wZS5rYXRlZ29yaWVuID0gS2F0ZWdvcmllLnF1ZXJ5KCk7XG4gICAgJHNjb3BlLnRyYWVnZXIgPSBuZXcgVHJhZWdlcigpO1xuICAgICRzY29wZS50cmFlZ2VycyA9IFRyYWVnZXIucXVlcnkoKTtcblxuICAgICRzY29wZS5uZXdUcmFlZ2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS50cmFlZ2VyID0gbmV3IFRyYWVnZXIoKTtcbiAgICAgICAgJHNjb3BlLmVkaXRpbmcgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCRzY29wZS50cmFlZ2VyLmlkKSB7XG4gICAgICAgICAgICBUcmFlZ2VyLnVwZGF0ZSgkc2NvcGUudHJhZWdlcikudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3VHJhZWdlcigpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoJ0VpbiBUcsOkZ2VyIG1pdCBkaWVzZXIgRW1haWwtQWRyZXNzZSBleGlzdGllcnQgYmVyZWl0cyEnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHNjb3BlLnRyYWVnZXIuJHNhdmUoKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnRyYWVnZXJzLnB1c2gocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICRzY29wZS5uZXdUcmFlZ2VyKCk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBhbGVydCgnRWluIFRyw6RnZXIgbWl0IGRpZXNlciBFbWFpbC1BZHJlc3NlIGV4aXN0aWVydCBiZXJlaXRzIScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJHNjb3BlLnNldEFjdGl2ZVRyYWVnZXIgPSBmdW5jdGlvbih0cmFlZ2VyKSB7XG4gICAgICAgICRzY29wZS50cmFlZ2VyID0gdHJhZWdlcjtcbiAgICAgICAgJHNjb3BlLmVkaXRpbmcgPSB0cnVlO1xuICAgIH07XG5cbiAgICAkc2NvcGUucmVtb3ZlID0gZnVuY3Rpb24odHJhZWdlcikge1xuICAgICAgICBUcmFlZ2VyLmRlbGV0ZSh0cmFlZ2VyLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS50cmFlZ2Vycy5pbmRleE9mKHRyYWVnZXIpO1xuICAgICAgICAgICAgaWYgKGluZGV4ICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnRyYWVnZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBCaWxkZXJcbiAgICAkc2NvcGUub25GaWxlU2VsZWN0ID0gZnVuY3Rpb24oJGZpbGVzKSB7XG4gICAgICAgIHZhciBkb1VwbG9hZCA9IGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgICAgIFVwbG9hZC51cGxvYWQoe1xuICAgICAgICAgICAgICAgIHVybDogJ2FwcF9kZXYucGhwL2ltZy91cGxvYWQnLCAvL3VwbG9hZC5waHAgc2NyaXB0LCBub2RlLmpzIHJvdXRlLCBvciBzZXJ2bGV0IHVybFxuICAgICAgICAgICAgICAgIC8vIG1ldGhvZDogJ1BPU1QnIG9yICdQVVQnLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIC8vIGhlYWRlcnM6IHsnaGVhZGVyLWtleSc6ICdoZWFkZXItdmFsdWUnfSxcbiAgICAgICAgICAgICAgICAvLyB3aXRoQ3JlZGVudGlhbHM6IHRydWUsXG4gICAgICAgICAgICAgICAgZGF0YToge215T2JqOiAkc2NvcGUubXlNb2RlbE9ian0sXG4gICAgICAgICAgICAgICAgZmlsZTogZmlsZSAvLyBvciBsaXN0IG9mIGZpbGVzOiAkZmlsZXMgZm9yIGh0bWw1IG9ubHlcbiAgICAgICAgICAgICAgICAvLyBmaWxlTmFtZTogJ2RvYy5qcGcnIG9yIFsnMS5qcGcnLCAnMi5qcGcnLCAuLi5dIC8vIHRvIG1vZGlmeSB0aGUgbmFtZSBvZiB0aGUgZmlsZVxuICAgICAgICAgICAgICAgIC8qIGN1c3RvbWl6ZSBmaWxlIGZvcm1EYXRhIG5hbWUgKCdDb250ZW50LURlc3Bvc2l0aW9uJyksIHNlcnZlciBzaWRlIGZpbGUgdmFyaWFibGUgbmFtZS5cbiAgICAgICAgICAgICAgICAgRGVmYXVsdCBpcyAnZmlsZScgKi9cbiAgICAgICAgICAgICAgICAvL2ZpbGVGb3JtRGF0YU5hbWU6IG15RmlsZSwgLy9vciBhIGxpc3Qgb2YgbmFtZXMgZm9yIG11bHRpcGxlIGZpbGVzIChodG1sNSkuXG4gICAgICAgICAgICAgICAgLyogY3VzdG9taXplIGhvdyBkYXRhIGlzIGFkZGVkIHRvIGZvcm1EYXRhLiBTZWUgIzQwI2lzc3VlY29tbWVudC0yODYxMjAwMCBmb3Igc2FtcGxlIGNvZGUgKi9cbiAgICAgICAgICAgICAgICAvL2Zvcm1EYXRhQXBwZW5kZXI6IGZ1bmN0aW9uKGZvcm1EYXRhLCBrZXksIHZhbCl7fVxuICAgICAgICAgICAgfSkucHJvZ3Jlc3MoZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwZXJjZW50OiAnICsgcGFyc2VJbnQoMTAwLjAgKiBldnQubG9hZGVkIC8gZXZ0LnRvdGFsKSk7XG4gICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIC8vIGZpbGUgaXMgdXBsb2FkZWQgc3VjY2Vzc2Z1bGx5XG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS50cmFlZ2VyLmJpbGRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50cmFlZ2VyLmJpbGRlciA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaWxlLnRtcF9uYW1lID0gZGF0YS5mb2xkZXI7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnRyYWVnZXIuYmlsZGVyLnB1c2goZmlsZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vLmVycm9yKC4uLilcbiAgICAgICAgICAgIC8vLnRoZW4oc3VjY2VzcywgZXJyb3IsIHByb2dyZXNzKTtcbiAgICAgICAgICAgIC8vLnhocihmdW5jdGlvbih4aHIpe3hoci51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lciguLi4pfSkvLyBhY2Nlc3MgYW5kIGF0dGFjaCBhbnkgZXZlbnQgbGlzdGVuZXIgdG8gWE1MSHR0cFJlcXVlc3QuXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8kZmlsZXM6IGFuIGFycmF5IG9mIGZpbGVzIHNlbGVjdGVkLCBlYWNoIGZpbGUgaGFzIG5hbWUsIHNpemUsIGFuZCB0eXBlLlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRmaWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGZpbGUgPSAkZmlsZXNbaV07XG4gICAgICAgICAgICAkc2NvcGUudXBsb2FkID0gZG9VcGxvYWQoZmlsZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbiAgICAvLyBBZHJlc3NlblxuICAgICRzY29wZS5uZXdBZHJlc3NlID0ge307XG4gICAgJHNjb3BlLmFkZEFkcmVzc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCRzY29wZS50cmFlZ2VyLmFkcmVzc2VuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICRzY29wZS50cmFlZ2VyLmFkcmVzc2VuID0gW107XG4gICAgICAgIH1cbiAgICAgICAgJHNjb3BlLnRyYWVnZXIuYWRyZXNzZW4ucHVzaCgkc2NvcGUubmV3QWRyZXNzZSk7XG4gICAgICAgICRzY29wZS5uZXdBZHJlc3NlID0ge307XG4gICAgfTtcblxuICAgICRzY29wZS5pc0FkcmVzc2VWYWxpZCA9IGZ1bmN0aW9uKGFkcmVzc2UpIHtcbiAgICAgICAgaWYgKGFkcmVzc2Uuc3RyYXNzZSA9PT0gdW5kZWZpbmVkIHx8IGFkcmVzc2Uuc3RyYXNzZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChhZHJlc3NlLm9ydCA9PT0gdW5kZWZpbmVkIHx8IGFkcmVzc2Uub3J0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbn1dKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
